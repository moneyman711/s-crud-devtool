/*
 * JSP generated by Resin-4.0.47 (built Thu, 03 Dec 2015 10:34:34 PST)
 */

package _jsp._user._params;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.naming.*;
import javax.sql.*;
import com.beanwiz.*;
import com.webapp.utils.*;

public class _file_22dupload_22dinclude__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html");

    java.util.TreeMap OverrideMap;
    synchronized (pageContext.getSession()) {
      OverrideMap = (java.util.TreeMap) pageContext.getSession().getAttribute("OverrideMap");
      if (OverrideMap == null) {
        OverrideMap = new java.util.TreeMap();
        pageContext.getSession().setAttribute("OverrideMap", OverrideMap);
      }
    }
    
String JNDIDSN = request.getParameter("JNDIDSN");
String TableName = request.getParameter("TableName");
String BeanName = request.getParameter("BeanName");
String Database = null ;
           
response.setDateHeader("Expires", 0 );
response.setHeader("Cache-Control", "no-cache, post-check=0, pre-check=0"); 
response.setHeader("Pragma", "no-cache"); 

Context env = (Context) new InitialContext().lookup("java:comp/env");
DataSource source = (DataSource) env.lookup(JNDIDSN);
Connection conn = source.getConnection();
Database = conn.getCatalog();
if(Database == null )
{
   // Do some stupid guesswork :
	    Database = JNDIDSN.substring(JNDIDSN.indexOf("/",0)+1 );
}


com.webapp.utils.PortableSQL psql = new com.webapp.utils.PortableSQL(conn);
String query = BeanwizHelper.openTableSQL(conn, TableName);
StringBuffer dump = new StringBuffer();	

boolean bFileUpload = false;

try 
{
java.sql.Statement stmt = conn.createStatement();
java.sql.ResultSet rslt = stmt.executeQuery(query);
java.sql.ResultSetMetaData rsmd = rslt.getMetaData();
int count  = rsmd.getColumnCount();	



for(int n = 1 ; n <= count ; n++ )
{	
	 int nJdbcType = rsmd.getColumnType(n);
	 String GetMethod = "";
	 String ColName = rsmd.getColumnName(n) ;
	 String ColTypeName = rsmd.getColumnTypeName(n);
	 String ColVarName = com.beanwiz.ColumnName.colVarName(ColName);
	 boolean bOverride=false ;
	 
	 int ColSize = rsmd.getColumnDisplaySize(n) ;
	 int Precision = rsmd.getPrecision(n);
	 int Scale = rsmd.getScale(n);

	 	 // Check for column type overrride 
	 String col_key = Database+"."+TableName+"."+ColName ;
	 
	 if( OverrideMap !=null && OverrideMap.containsKey(col_key) )
	 {
	    bOverride=true;
			try
			{
			    nJdbcType = Integer.parseInt( (String)OverrideMap.get(col_key) );
			}catch(NumberFormatException ex)
			{
			  // revert back to original type
			   nJdbcType = rsmd.getColumnType(n);
			}
			ColTypeName = ColTypeOverride.typeLabel(nJdbcType) ;
	 }  // end if
	 
	 if( bOverride )
	 {
	  dump.append( "\r\n// Warning: The  column '"+ColName+"' no. [ " + n + " ] is manually overriden, it is  not wizard detected.\r\n" ) ;
   }
	       if( rsmd.isAutoIncrement(n))   dump.append("/* Auto increment column: \r\n");//continue ;
         switch(nJdbcType)
	       {
	          case java.sql.Types.BINARY:
						case java.sql.Types.BLOB:
						case java.sql.Types.VARBINARY:
						case java.sql.Types.LONGVARBINARY:
			        
						   bFileUpload = true;
					 
					  break ;
					  
						default:
					  break ;

	      }		// END switch 
		   if( rsmd.isAutoIncrement(n))   dump.append("*/\r\n");
	    
	}// end for(int n = 1 ; n <= count ; n++ ) 
  rslt.close(); 
  stmt.close();
}
finally
{
 	 conn.close();
}


if(bFileUpload)
{ 

    out.write(_jsp_string0, 0, _jsp_string0.length);
     
} 

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 8324212715306645294L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("user/params/file-upload-include.jsp"), 768173580073566882L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n/* \r\n    // Code to be considered for file upload fields\r\n    ResinFileUpload RsUpload = new ResinFileUpload() ;\r\n    RsUpload.load( application,request,\"FileUploadField\" ) ;\r\n    byte[] FileBytes = RsUpload.getFileBytes() ;\r\n    String FileName = RsUpload.getFileName();\r\n    String FileExt = RsUpload.getFileExt();\r\n    String MimeType = RsUpload.getMimeType(); // OR  RsUpload.getSafeMimeType();\r\n    int FileSize = RsUpload.getFileSize();\r\n*/\r\n\r\n".toCharArray();
  }
}
