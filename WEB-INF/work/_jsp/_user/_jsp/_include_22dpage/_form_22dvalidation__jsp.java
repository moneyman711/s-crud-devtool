/*
 * JSP generated by Resin-4.0.47 (built Thu, 03 Dec 2015 10:34:34 PST)
 */

package _jsp._user._jsp._include_22dpage;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.beanwiz.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import javax.servlet.*;
import javax.servlet.http.*;
import com.beanwiz.TableColumn;

public class _form_22dvalidation__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html");

    java.util.Vector ManField;
    synchronized (pageContext.getSession()) {
      ManField = (java.util.Vector) pageContext.getSession().getAttribute("ManField");
      if (ManField == null) {
        ManField = new java.util.Vector();
        pageContext.getSession().setAttribute("ManField", ManField);
      }
    }
    java.util.TreeMap ManFieldMap;
    synchronized (pageContext.getSession()) {
      ManFieldMap = (java.util.TreeMap) pageContext.getSession().getAttribute("ManFieldMap");
      if (ManFieldMap == null) {
        ManFieldMap = new java.util.TreeMap();
        pageContext.getSession().setAttribute("ManFieldMap", ManFieldMap);
      }
    }
    
int nManCount = ManField.size();
String TableName = request.getParameter("TableName");
String LoginFolderName =  request.getParameter("LoginFolderName");
String PageType =  request.getParameter("PageType");
String NewFormID = TableName+"_Add" ;
String UpdateFormID = TableName+"_Update" ;
String SearchFormID = TableName+"_Search" ;
String s = ""; 
String s1 = "";

    out.write(_jsp_string0, 0, _jsp_string0.length);
     if(PageType.equalsIgnoreCase("R-D") || PageType.equalsIgnoreCase("R-D-P") || PageType.equalsIgnoreCase("R-D-POPUP")) {
    out.write(_jsp_string1, 0, _jsp_string1.length);
     }else{ 
     if(PageType.equalsIgnoreCase("ALL-IN-ONE") || PageType.equalsIgnoreCase("Listpage") || PageType.equalsIgnoreCase("Listpage-P")) {
    out.write(_jsp_string2, 0, _jsp_string2.length);
     if(LoginFolderName.equalsIgnoreCase("admin")){ 
    out.write(_jsp_string3, 0, _jsp_string3.length);
     } 
    out.write(_jsp_string4, 0, _jsp_string4.length);
     
if(nManCount > 0) // mandatory fields are there
{ 

    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((NewFormID ));
    out.write(_jsp_string6, 0, _jsp_string6.length);
     for( int i=0; i < nManCount; i++){s = (String)ManField.get(i) ;if(ManFieldMap.containsKey(s)){s1 = ManFieldMap.get(s).toString() ;
    out.write(_jsp_string7, 0, _jsp_string7.length);
    out.print(((String)ManField.get(i) ));
    out.write(_jsp_string8, 0, _jsp_string8.length);
    int i1 = 0; String[] parts = s1.split(","); int partslength =  parts.length;for(String str:parts){i1++;short svalidType = Short.parseShort(str);
    out.write(_jsp_string9, 0, _jsp_string9.length);
    if(svalidType == ValidationType.MOBILE_IN){
    out.write(_jsp_string10, 0, _jsp_string10.length);
     }else{ 
    out.print((ValidationType.getLabel(svalidType) ));
     } 
    out.write(_jsp_string11, 0, _jsp_string11.length);
     if(svalidType == ValidationType.NOT_EMPTY) {
    out.write(_jsp_string12, 0, _jsp_string12.length);
    out.print(((String)ManField.get(i) ));
    out.write(_jsp_string13, 0, _jsp_string13.length);
     }if(svalidType == ValidationType.NUMERIC){ 
    out.write(_jsp_string14, 0, _jsp_string14.length);
     }if(svalidType == ValidationType.STRING_LENGTH){ 
    out.write(_jsp_string15, 0, _jsp_string15.length);
     }if(svalidType == ValidationType.FILE){ 
    out.write(_jsp_string16, 0, _jsp_string16.length);
     }if(svalidType == ValidationType.EMAIL){ 
    out.write(_jsp_string17, 0, _jsp_string17.length);
     }if(svalidType == ValidationType.PHONE){ 
    out.write(_jsp_string18, 0, _jsp_string18.length);
     }if(svalidType == ValidationType.REGEXP){ 
    out.write(_jsp_string19, 0, _jsp_string19.length);
     }if(svalidType == ValidationType.MOBILE_IN){ 
    out.write(_jsp_string20, 0, _jsp_string20.length);
     } 
    out.write(_jsp_string21, 0, _jsp_string21.length);
     if(i1>0 && i1 != partslength) {
    out.write(',');
     } 
     } 
    out.write(_jsp_string22, 0, _jsp_string22.length);
     if(i <nManCount-1) out.print(","); 
     } } 
    out.write(_jsp_string23, 0, _jsp_string23.length);
    
}
else
{ 

    out.write(_jsp_string1, 0, _jsp_string1.length);
     out.println("/*"); 
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((NewFormID ));
    out.write(_jsp_string24, 0, _jsp_string24.length);
     out.println("*/"); 
     
}

    out.write(_jsp_string25, 0, _jsp_string25.length);
     if(LoginFolderName.equalsIgnoreCase("admin")){ 
    out.write(_jsp_string26, 0, _jsp_string26.length);
     } 
    out.write(_jsp_string27, 0, _jsp_string27.length);
     
if(nManCount > 0) // mandatory fields are there
{ 

    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((UpdateFormID ));
    out.write(_jsp_string6, 0, _jsp_string6.length);
     for( int i=0; i < nManCount; i++){s = (String)ManField.get(i) ;if(ManFieldMap.containsKey(s)){s1 = ManFieldMap.get(s).toString() ;
    out.write(_jsp_string7, 0, _jsp_string7.length);
    out.print(((String)ManField.get(i) ));
    out.write(_jsp_string8, 0, _jsp_string8.length);
    int i1 = 0; String[] parts = s1.split(","); int partslength =  parts.length;for(String str:parts){i1++;short svalidType = Short.parseShort(str);
    out.write(_jsp_string9, 0, _jsp_string9.length);
    if(svalidType == ValidationType.MOBILE_IN){
    out.write(_jsp_string10, 0, _jsp_string10.length);
     }else{ 
    out.print((ValidationType.getLabel(svalidType) ));
     } 
    out.write(_jsp_string11, 0, _jsp_string11.length);
     if(svalidType == ValidationType.NOT_EMPTY) {
    out.write(_jsp_string12, 0, _jsp_string12.length);
    out.print(((String)ManField.get(i) ));
    out.write(_jsp_string13, 0, _jsp_string13.length);
     }if(svalidType == ValidationType.NUMERIC){ 
    out.write(_jsp_string28, 0, _jsp_string28.length);
     }if(svalidType == ValidationType.STRING_LENGTH){ 
    out.write(_jsp_string29, 0, _jsp_string29.length);
     }if(svalidType == ValidationType.FILE){ 
    out.write(_jsp_string16, 0, _jsp_string16.length);
     }if(svalidType == ValidationType.EMAIL){ 
    out.write(_jsp_string30, 0, _jsp_string30.length);
     }if(svalidType == ValidationType.PHONE){ 
    out.write(_jsp_string31, 0, _jsp_string31.length);
     }if(svalidType == ValidationType.REGEXP){ 
    out.write(_jsp_string32, 0, _jsp_string32.length);
     }if(svalidType == ValidationType.MOBILE_IN){ 
    out.write(_jsp_string20, 0, _jsp_string20.length);
     } 
    out.write(_jsp_string21, 0, _jsp_string21.length);
     if(i1>0 && i1 != partslength) {
    out.write(',');
     } 
     } 
    out.write(_jsp_string22, 0, _jsp_string22.length);
     if(i <nManCount-1) out.print(","); 
     } } 
    out.write(_jsp_string23, 0, _jsp_string23.length);
     
}
else
{ 

     out.println("/*"); 
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((UpdateFormID ));
    out.write(_jsp_string24, 0, _jsp_string24.length);
     out.println("*/"); 
     
}

    out.write(_jsp_string33, 0, _jsp_string33.length);
     if(PageType.equalsIgnoreCase("ALL-IN-ONE")) {
    out.write(_jsp_string34, 0, _jsp_string34.length);
     if(LoginFolderName.equalsIgnoreCase("admin")){ 
    out.write(_jsp_string35, 0, _jsp_string35.length);
     } 
    out.write(_jsp_string1, 0, _jsp_string1.length);
     out.println("/*"); 
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((SearchFormID ));
    out.write(_jsp_string24, 0, _jsp_string24.length);
     out.println("*/"); 
    out.write(_jsp_string36, 0, _jsp_string36.length);
     } 
    out.write(_jsp_string37, 0, _jsp_string37.length);
     
}
else if(PageType.equalsIgnoreCase("S-R-D-P") || PageType.equalsIgnoreCase("S-R-D") || PageType.equalsIgnoreCase("S-R-D-QryObj")) 
{

    out.write(_jsp_string38, 0, _jsp_string38.length);
     if(LoginFolderName.equalsIgnoreCase("admin")){ 
    out.write(_jsp_string35, 0, _jsp_string35.length);
     } 
    out.write(_jsp_string1, 0, _jsp_string1.length);
     out.println("/*"); 
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((SearchFormID ));
    out.write(_jsp_string24, 0, _jsp_string24.length);
     out.println("*/"); 
    out.write(_jsp_string39, 0, _jsp_string39.length);
     } 
    out.write(_jsp_string4, 0, _jsp_string4.length);
     } 
    out.write(_jsp_string40, 0, _jsp_string40.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 8324212715306645294L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("user/jsp/include-page/form-validation.jsp"), -1998765573660472680L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string40;
  private final static char []_jsp_string16;
  private final static char []_jsp_string11;
  private final static char []_jsp_string7;
  private final static char []_jsp_string34;
  private final static char []_jsp_string26;
  private final static char []_jsp_string6;
  private final static char []_jsp_string29;
  private final static char []_jsp_string24;
  private final static char []_jsp_string14;
  private final static char []_jsp_string5;
  private final static char []_jsp_string2;
  private final static char []_jsp_string18;
  private final static char []_jsp_string36;
  private final static char []_jsp_string17;
  private final static char []_jsp_string9;
  private final static char []_jsp_string31;
  private final static char []_jsp_string28;
  private final static char []_jsp_string23;
  private final static char []_jsp_string19;
  private final static char []_jsp_string38;
  private final static char []_jsp_string33;
  private final static char []_jsp_string39;
  private final static char []_jsp_string10;
  private final static char []_jsp_string13;
  private final static char []_jsp_string21;
  private final static char []_jsp_string12;
  private final static char []_jsp_string37;
  private final static char []_jsp_string15;
  private final static char []_jsp_string32;
  private final static char []_jsp_string27;
  private final static char []_jsp_string1;
  private final static char []_jsp_string25;
  private final static char []_jsp_string4;
  private final static char []_jsp_string35;
  private final static char []_jsp_string3;
  private final static char []_jsp_string0;
  private final static char []_jsp_string22;
  private final static char []_jsp_string8;
  private final static char []_jsp_string20;
  private final static char []_jsp_string30;
  static {
    _jsp_string40 = "\r\n/* Form validation code End */".toCharArray();
    _jsp_string16 = "\r\n												extension: 'pdf',\r\n												type: 'application/pdf',\r\n                        message: 'Please choose a PDF file'".toCharArray();
    _jsp_string11 = ": {".toCharArray();
    _jsp_string7 = "\r\n            ".toCharArray();
    _jsp_string34 = "\r\nelse if( nAction==SEARCH_RECORDS ) \r\n{\r\n%>\r\n// Search Form  \r\n".toCharArray();
    _jsp_string26 = "//fetch_Course(1,<%=nModuleID %>,'ChngAct')".toCharArray();
    _jsp_string6 = "').formValidation({\r\n        framework: 'bootstrap',\r\n        fields: {".toCharArray();
    _jsp_string29 = "\r\n												max: 50,\r\n												//min: 3,\r\n											  message: 'The FirstName must be less than 50 characters'".toCharArray();
    _jsp_string24 = "').formValidation({\r\n        framework: 'bootstrap',\r\n        fields: {\r\n            $$fieldname$$: {\r\n                validators: {\r\n                    notEmpty: {\r\n                        message: 'The $$fieldname$$ is required'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n".toCharArray();
    _jsp_string14 = "\r\n												message: 'not number'".toCharArray();
    _jsp_string5 = "    $('#".toCharArray();
    _jsp_string2 = "<% \r\nif(nAction==NEW_FORM ) \r\n{\r\n%>\r\n// New Entry Form\r\n".toCharArray();
    _jsp_string18 = "\r\n												country: 'IN',\r\n												message: 'not valid phone number'".toCharArray();
    _jsp_string36 = "<%\r\n}".toCharArray();
    _jsp_string17 = "\r\n												message: 'not valid email address'".toCharArray();
    _jsp_string9 = "\r\n								    ".toCharArray();
    _jsp_string31 = "\r\n												country: 'IN',\r\n												message: 'The value is not valid phone number'".toCharArray();
    _jsp_string28 = "\r\n												message: 'The value is not number'".toCharArray();
    _jsp_string23 = "\r\n        }\r\n    });".toCharArray();
    _jsp_string19 = "\r\n												regexp: /^$/,\r\n										    message: 'not valid'".toCharArray();
    _jsp_string38 = "\r\n<%\r\nif( nAction==SEARCH_RECORDS ) \r\n{\r\n%>\r\n// Search Form  \r\n".toCharArray();
    _jsp_string33 = "\r\n<%\r\n}".toCharArray();
    _jsp_string39 = "<%\r\n} \r\n%>\r\n".toCharArray();
    _jsp_string10 = "regexp".toCharArray();
    _jsp_string13 = " is required'".toCharArray();
    _jsp_string21 = "					\r\n                    }".toCharArray();
    _jsp_string12 = "\r\n                        message: 'The ".toCharArray();
    _jsp_string37 = "\r\n%>\r\n".toCharArray();
    _jsp_string15 = "\r\n												max: 50,\r\n												//min: 3,\r\n											  message: 'The value must be less than 50 characters'".toCharArray();
    _jsp_string32 = "\r\n												regexp: /^$/,\r\n										    message: 'The value is not valid'".toCharArray();
    _jsp_string27 = "  \r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
    _jsp_string25 = "\r\n<%\r\n}  \r\nelse if( nAction==CHANGE_FORM ) \r\n{\r\n%>\r\n// Update Entry Form\r\n".toCharArray();
    _jsp_string4 = " \r\n".toCharArray();
    _jsp_string35 = "//fetch_Course(1,<%=nModuleID %>,'SrchAct')".toCharArray();
    _jsp_string3 = "//fetch_Course(1,<%=nModuleID %>,'NewAct')".toCharArray();
    _jsp_string0 = "/* Form validation code Start : for validation plugin */".toCharArray();
    _jsp_string22 = "\r\n								}\r\n						}".toCharArray();
    _jsp_string8 = ": {\r\n                validators: {".toCharArray();
    _jsp_string20 = "\r\n										    regexp: /^[789]\\d{9}$/,//^[7-9][0-9]{9}$\r\n										    message: 'not valid Mobile number'".toCharArray();
    _jsp_string30 = "\r\n												message: 'The value is not valid email address'".toCharArray();
  }
}
